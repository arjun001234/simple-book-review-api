/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Context } from "./../graphql/context"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BookInputType: { // input type
    authorName: string; // String!
    description: string; // String!
    isbn: string; // String!
    price?: number | null; // Float
    title: string; // String!
  }
  ReviewInputType: { // input type
    bookId: string; // ID!
    content: string; // String!
    email: string; // String!
    name: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
}

export interface NexusGenObjects {
  Author: { // root type
    id: string; // ID!
    name: string; // String!
  }
  Book: { // root type
    description: string; // String!
    id: string; // ID!
    isbn: string; // String!
    price?: number | null; // Float
    title: string; // String!
  }
  Mutation: {};
  Query: {};
  Review: { // root type
    content: string; // String!
    createdAt: string; // String!
    id: string; // ID!
  }
  Reviewer: { // root type
    email: string; // String!
    id: string; // ID!
    name: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Author: { // field return type
    books: Array<NexusGenRootTypes['Book'] | null>; // [Book]!
    id: string; // ID!
    name: string; // String!
  }
  Book: { // field return type
    authors: NexusGenRootTypes['Author'][]; // [Author!]!
    description: string; // String!
    id: string; // ID!
    isbn: string; // String!
    price: number | null; // Float
    reviews: NexusGenRootTypes['Review'][]; // [Review!]!
    title: string; // String!
  }
  Mutation: { // field return type
    createBook: NexusGenRootTypes['Book']; // Book!
    createReview: NexusGenRootTypes['Review']; // Review!
  }
  Query: { // field return type
    author: NexusGenRootTypes['Author']; // Author!
    authors: NexusGenRootTypes['Author'][]; // [Author!]!
    book: NexusGenRootTypes['Book']; // Book!
    bookReviews: NexusGenRootTypes['Review'][]; // [Review!]!
    books: NexusGenRootTypes['Book'][]; // [Book!]!
    searchAuthors: NexusGenRootTypes['Author'][]; // [Author!]!
    searchBooks: NexusGenRootTypes['Book'][]; // [Book!]!
  }
  Review: { // field return type
    book: NexusGenRootTypes['Book']; // Book!
    content: string; // String!
    createdAt: string; // String!
    id: string; // ID!
    reviewer: NexusGenRootTypes['Reviewer']; // Reviewer!
  }
  Reviewer: { // field return type
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    reviews: NexusGenRootTypes['Review'][]; // [Review!]!
  }
}

export interface NexusGenFieldTypeNames {
  Author: { // field return type name
    books: 'Book'
    id: 'ID'
    name: 'String'
  }
  Book: { // field return type name
    authors: 'Author'
    description: 'String'
    id: 'ID'
    isbn: 'String'
    price: 'Float'
    reviews: 'Review'
    title: 'String'
  }
  Mutation: { // field return type name
    createBook: 'Book'
    createReview: 'Review'
  }
  Query: { // field return type name
    author: 'Author'
    authors: 'Author'
    book: 'Book'
    bookReviews: 'Review'
    books: 'Book'
    searchAuthors: 'Author'
    searchBooks: 'Book'
  }
  Review: { // field return type name
    book: 'Book'
    content: 'String'
    createdAt: 'String'
    id: 'ID'
    reviewer: 'Reviewer'
  }
  Reviewer: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
    reviews: 'Review'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createBook: { // args
      data: NexusGenInputs['BookInputType']; // BookInputType!
    }
    createReview: { // args
      data: NexusGenInputs['ReviewInputType']; // ReviewInputType!
    }
  }
  Query: {
    author: { // args
      id: string; // ID!
    }
    book: { // args
      id: string; // ID!
    }
    bookReviews: { // args
      id: string; // ID!
    }
    searchAuthors: { // args
      name: string; // String!
    }
    searchBooks: { // args
      title: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}